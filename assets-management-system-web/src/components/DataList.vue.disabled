<template>
<div class="data-list">
    <table :width="width" cellspacing="0">
        <tr>
            <td 
                v-for="(col, field_name) of dataStruct" 
                :style="{ /*width: col.width*/ }" 
                :key="field_name"
                v-if="col.name">
                {{ col.name }}
            </td>
            <td class="operating" v-if="operating">操作</td>
        </tr>
        <tr v-for="line, i in data_source">
            <td 
                v-for="(col, field_name) of dataStruct" 
                :key="field_name"
                v-if="col.name">
                <span v-if="line[field_name]">
                    <router-link :to="col.to(line)" v-if="col.to">
                        {{ line[field_name] }}
                    </router-link>
                    <span v-else>{{ line[field_name] }}</span>
                </span>
                <span class="null" v-else>---</span>
            </td>
            <td class="operating" v-if="operating">
                <DataOperating :btn="operating(dataSource[i])" :vertical="vertical" />
            </td>
        </tr>
    </table>
</div>
</template>

<script>
import util from "../util"
import DataOperating from "./DataOperating.vue"
import {
    ref,
    reactive
} from '@vue/reactivity'
export default {
    data() {
        return {
            edit_data: this.onEdit ? this.onEdit : function () {},
            delete_data: this.onDelete ? this.onDelete : function () {},
            // _data_source: []
            data_source: []
        };
    },
    methods: {
        updateDataSource() {
            let that = this
            this.data_source = []
            this.dataSource.forEach((line, index) => {
                let cloneLine = {...line}

                that.data_source.push(cloneLine)

                for (let field_name in that.dataStruct) {
                    if (that.dataStruct[field_name] && that.dataStruct[field_name].value) {
                        that.dataStruct[field_name].value(that.data_source, index)
                    }
                }
                
            })
        }
    },
    mounted() {
        this.updateDataSource()
    },
    computed: {
        // data_source() {
        //     let that = this
        //     this._data_source = []
        //     this.dataSource.forEach((line, index) => {
        //         let cloneLine = {...line}

        //         that._data_source.push(cloneLine)

        //         for (let field_name in that.dataSource[index]) {
        //             if (that.dataStruct[field_name] && that.dataStruct[field_name].value) {
        //                 that.dataStruct[field_name].value(that._data_source, index)
        //             }
        //         }
                
        //     })
        //     return this._data_source
        // }
    },
    watch: {
        dataSource: {
            deep: true,
            immediate: true,
            handler(oldValue, newValue) {
                this.updateDataSource()
            }
        }
    },
    props: [
        "dataStruct",
        "dataSource",
        "operating",
        "width",
        "vertical",
    ],
    components: {
        DataOperating
    },
};
</script>

<style lang="less">
.data-list {
    a {
        text-decoration: none;
        color: #5382bd;
    }

    a::after {
        display: inline-block;
        content: ">";
        color: rgb(161, 161, 161);
        font-size: large;
    }

    table {
        tr {
            background-color: #f5f8fa;

            //min-height: 50px;
            td {
                height: 35px;
                padding: 5px 20px;
                border-bottom: 1px solid #dfdfdf;

                .null {
                    color: #afafaf;
                }
            }

            .operating {
                width: 150px;
            }
        }

        tr:first-child {
            color: #515050;
            font-weight: bold;
            background-color: #e8f2fe;

            td {
                border-top: 1px solid #bbe0ff;
                border-bottom: $border-top;
            }
        }

        tr:nth-child(2n) {
            background-color: white;
        }
    }
}
</style>
